{"google":"","tagline":"Linux Apache MySQL PHP setup","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Linux Apache MySQL PHP setup\r\n\r\nThe LAMP stack is a very popular setup for a web server, it is relatively easy to create, leveraging open source software. Python or Perl may be used to replace PHP depending on specific requirements alternatively the AMP stack can be installed on alternative operating systems.\r\n\r\nFor this particular setup we will initially reference Red Hat Enterprise Linux / CentOS Linux version 5.x or above.\r\n\r\nYour method of accessing the server will depend on it's location, either direct access or Secure Shell (SSH) for a remote server. If you have SSH access you should be able to skip sections 1 and 2. If you don't and the server is hosted remotely ask your support team to put your user on the sudoers list and give you SSH access.\r\n\r\n## Section 1: Set up root access\r\n\r\nBy default we don't want to login as root to perform tasks but we do want to give our user account root access when needed. To give our user root access we need to add them to the sudoers list.\r\n\r\nLogin as root:\r\n\r\n\t$ su\r\n\t\r\nThen edit sudoers list, using visudo if available:\r\n\r\n\t$ visudo\r\n\t\r\nOr edit the file with nano:\r\n\r\n\t$ nano /etc/sudoers\r\n\t\r\nUnder the section\r\n \r\n\t## Allow root to run any commands anywhere\r\n\troot\t\tALL=(ALL)\tALL\r\n\r\nAdd\r\n\r\n\tusername\tALL=(ALL)\tALL\r\n\t\r\nThen if in visudo exit the file by entering `:wq` or use the standard exit path for your editor.\r\n\r\nFinish using root and return to being your user:\r\n\r\n\t$ su username\r\n\t\r\nYou now have the ability to invoke root access by prepositioning any commands with the `sudo` key word.\r\n\r\nTry using sudo by updating your server:\r\n\r\n\t$ sudo yum update\r\n\r\n## Section 2: Secure Shell access\r\n\r\nSecure Shell allows an authenticated user a secure remote connect to the server shell where they can perform a range of tasks.\r\n\r\nFirst we should confirm if SSH is already installed.\r\n\r\n\t$ sudo yum info sshd\r\n\r\nIf SSH is not installed then begin installation with:\r\n\r\n\t$ sudo yum install openssh-server\r\n\t\r\nWhen installed start the service with:\r\n\r\n\t$ sudo service sshd start\r\n\t\r\nYou can now remotely access the server shell using:\r\n\r\n\t$ ssh username@server.ip.address\r\n\t\r\nAll further commands can be used directly or remotely on the server shell.\r\n\t\r\n## Section 3: Installing Apache, MySQL and PHP\r\n\r\nBefore installing Apache MySQL or PHP, you may want to check that they haven't already been installed.\r\n\r\n\tyum info httpd mysql php\r\n\t\r\nThis will return information on the specified installations.\r\n\r\nIf you don't have Apache MySQL or PHP plus extensions installed then this can be done with:\r\n\r\n\tyum install httpd mysql php php-gd php-mysql\r\n\r\nWith MySQL installed we need to create the MySQL root user:\r\n\r\n\tmysql -u root\r\n\t\r\n\tmysql> SET PASSWORD FOR 'root'@'localhost' = PASSWORD('new-password');\r\n\t\r\nTo load the MySQL PHP module we need to edit php.ini:\r\n\t\r\n\tsudo nano /etc/php.ini\r\n\t\r\nIn php.ini change: \t\r\n\t\r\n\t;extension=mysql.so\r\n\t\r\nto\r\n\r\n\textension=mysql.so\r\n\r\nApache, MySQL and PHP should now be ready to use.\t\r\n\t\r\n## Section 4: Permissions for site deployment\r\n\r\nTo deploy a web site to the server we will need to give our user permissions to write to the correct folders. The preferred method to do this is to create a group which the user can be attached to, the group can then be given the required folder permissions.\r\n\r\nFirst check if the group already exists:\r\n\r\n\tcat /etc/group\r\n\r\nTo create a group called developers we can use:\r\n\r\n\tsudo groupadd developers\r\n\r\nIf groupadd is not available we can edit the group file using nano:\r\n\r\n\tsudo nano /etc/group\r\n\t\r\nAnd create a new group at the end of the file:\r\n\r\n\tdevelopers:x:groupid\r\n\t\r\nTo add the user to the group we can invoke usermod:\t\r\n\r\n\tusermod -G developers username\r\n\r\nIf usermod is unavailable \r\n\r\n\tsudo nano /etc/group\r\n\tdevelopers:x:groupid:username\r\n\r\nWith the group created and the user added to the group we can then change file and folder owners to the developers group.\r\n\r\nTo edit the Apache config:\r\n\r\n\tsudo chown -R :developers /etc/httpd/\r\n\t\r\nTo edit the hosts entry:\r\n\r\n\tsudo chown -R :developers /etc/hosts\r\n\t\r\nTo upload the site to the default Apache web folder:\r\n\r\n\tsudo chown -R :developers /var/www/\r\n\t\r\nWe will also want to give write permissions to the owners of the files and folders:\r\n\r\n\tsudo chmod -R g+w /etc/httpd/\r\n\tsudo chmod -R g+w /etc/hosts\r\n\tsudo chmod -R g+w /var/www/\r\n\t\r\n## Section 5: Create a site domain\r\n\r\nWe now want to create a site domain so that our deployed code can be viewed as a site on our server.\r\n\r\nFirst we need to edit the host file so that domain names directed to the server are recognised:\r\n\r\n\tsudo nano /etc/hosts\r\n\t\r\nAt the end of the hosts entries add your domain name:\r\n\r\n\t127.0.0.1       your-site.tld\r\n\t\r\nThe .tld can be .com, net or if this is for internal development it can be of your choice like .local.\r\n\r\nWith the host entry now set we will want Apache to do something with the entry, we need to edit the virtual hosts setting for Apache:\r\n\r\n\tsudo nano /etc/httpd/conf/httpd.conf\r\n\r\nUnder Section 3: Virtual Hosts add a new virtual host:\r\n\r\n\t<VirtualHost *:80>\r\n\t    ServerName your-site.tld\r\n\t    DocumentRoot \"/var/www/your-site\"\r\n\t    <Directory \"/var/www/html/your-site\">\r\n\t        Options Indexes FollowSymLinks +Includes ExecCGI\r\n\t        AllowOverride All\r\n\t        Order allow,deny\r\n\t        Allow from all\r\n\t    </Directory>\r\n\t</VirtualHost>\r\n\r\n### Gzip\r\n\r\nWhen adding a new virtual host it is recommended that gzip compression is used. This can be as simple as adding AddOutputFilterByType, although mod_filter will give greater granularity.\r\n\r\n\tAddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript\r\n\r\nSupport for older browsers may now be obsolete but if required the following properties can be added:\r\n\r\n\tBrowserMatch ^Mozilla/4 gzip-only-text/html\r\n\tBrowserMatch ^Mozilla/4\\.0[678] no-gzip\r\n\tBrowserMatch \\bMSIE !no-gzip !gzip-only-text/html\r\n\t\r\nCombined with the virtual hosts entry it should look like this:\r\n\r\n\t<VirtualHost *:80>\r\n\t    ServerName your-site.com\r\n\t    DocumentRoot \"/var/www/your-site\"\r\n\t    <Directory \"/var/www/html/your-site\">\r\n\t        Options Indexes FollowSymLinks +Includes ExecCGI\r\n\t        AllowOverride All\r\n\t        Order allow,deny\r\n\t        Allow from all\r\n\t    </Directory>\r\n\t\tAddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript\r\n\t</VirtualHost>\r\n\r\n## Section 6: Set up complete\r\n\r\nSet up should now be complete all that's left is to restart Apache so it picks up the updated setting.\r\n\r\n\tservice httpd restart\r\n\t\r\n\r\n","name":"Lamp setup"}